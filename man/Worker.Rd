% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker.r
\name{Worker}
\alias{Worker}
\title{Evaluates a Job's Expression on a Background Process.}
\description{
Evaluates a Job's Expression on a Background Process.

Evaluates a Job's Expression on a Background Process.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{hooks}}{A named list of currently registered callback hooks.}

\item{\code{backlog}}{A list of Jobs waiting to run on this Worker.}

\item{\code{job}}{The currently running Job.}

\item{\code{r_session}}{The \code{callr::r_session} background process interface.}

\item{\code{state}}{The Worker's state: 'starting', 'idle', 'busy', or 'stopped'.}

\item{\code{loaded}}{A list of global variables and attached functions on this Worker.}

\item{\code{uid}}{A short string, e.g. 'W11', that uniquely identifies this Worker.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Worker-new}{\code{Worker$new()}}
\item \href{#method-Worker-print}{\code{Worker$print()}}
\item \href{#method-Worker-start}{\code{Worker$start()}}
\item \href{#method-Worker-stop}{\code{Worker$stop()}}
\item \href{#method-Worker-restart}{\code{Worker$restart()}}
\item \href{#method-Worker-on}{\code{Worker$on()}}
\item \href{#method-Worker-run}{\code{Worker$run()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-new"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-new}{}}}
\subsection{Method \code{new()}}{
Creates a background \code{callr::r_session} process for running \link{Job}s.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$new(
  globals = NULL,
  packages = NULL,
  init = NULL,
  hooks = NULL,
  options = callr::r_session_options()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{globals}}{A list or similar set of values that are added to the
\code{.GlobalEnv} of workers.}

\item{\code{packages}}{Character vector of package names to load on workers.}

\item{\code{init}}{A call or R expression wrapped in curly braces to evaluate on
each worker just once, immediately after start-up. Will have access
to any variables defined by \code{globals} and assets from \code{packages}.
Returned value is ignored.}

\item{\code{hooks}}{A list of functions to run when the Worker state changes, of
the form \code{hooks = list(idle = function (worker) {...}, busy = ~{...})}.
The names of these functions should be \code{starting}, \code{idle}, \code{busy},
\code{stopped}, or \code{'*'}. \code{'*'} will be run every time the state changes,
whereas the others will only be run when the Worker enters that state.
Duplicate names are allowed.}

\item{\code{options}}{Passed to \code{callr::r_session$new()}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Worker object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-print"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-print}{}}}
\subsection{Method \code{print()}}{
Print method for a \code{Worker}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments are not used currently.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The Worker, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-start"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-start}{}}}
\subsection{Method \code{start()}}{
Starts a new background \code{callr::r_session} process using the
configuration previously defined with \code{Worker$new()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The Worker, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-stop"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-stop}{}}}
\subsection{Method \code{stop()}}{
Stops a Worker by terminating the background \code{callr::r_session} process
and calling \verb{<Job>$stop(reason)} on any Jobs currently assigned to this
Worker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$stop(reason = "worker stopped by user")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reason}}{Passed to \verb{<Job>$stop(reason)} for any Jobs currently
assigned to this Worker.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The Worker, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-restart"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-restart}{}}}
\subsection{Method \code{restart()}}{
Restarts a Worker by calling \verb{<Worker>$stop(reason)} and
\verb{<Worker>$start()} in succession.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$restart(reason = "restarting worker")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reason}}{Passed to \verb{<Job>$stop(reason)} for any Jobs currently
assigned to this Worker.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The Worker, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-on"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-on}{}}}
\subsection{Method \code{on()}}{
Attach a callback function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$on(state, func)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{The Worker state that will trigger this function. Typically one of:
\describe{
\item{\code{'*'} -        }{ Every time the state changes. }
\item{\code{'.next'} -    }{ Only one time, the next time the state changes. }
\item{\code{'starting'} - }{ After starting a new \code{callr::r_session} process. }
\item{\code{'idle'} -     }{ Waiting on new Jobs to be added. }
\item{\code{'busy'} -     }{ After a Job starts running. }
\item{\code{'stopped'} -  }{ After \verb{<Worker>$stop()} is called. }
}}

\item{\code{func}}{A function that accepts a Worker object as input. You can call
\verb{<Worker>$stop()} or edit its values and the changes will be
persisted (since Workers are reference class objects). You can also
edit/stop the active or backlogged jobs by modifying \verb{<Worker>$job}
or \verb{<Worker>$backlog}. Return value is ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A function that when called removes this callback from the Worker.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Worker-run"></a>}}
\if{latex}{\out{\hypertarget{method-Worker-run}{}}}
\subsection{Method \code{run()}}{
Assigns a Job to this Worker for evaluation on its background
\code{callr::r_session} process. Jobs can be assigned even when the Worker is
in the 'starting' or 'busy' state. A backlog of jobs will be evaluated
sequentially in the order they were added.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Worker$run(job)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job}}{A \link{Job} object, as created by \code{Job$new()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This Worker, invisibly.
}
}
}
