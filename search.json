[{"path":"https://cmmr.github.io/jobqueue/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 fillpattern authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmmr.github.io/jobqueue/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer. Alkek Center Metagenomics Microbiome Research. Copyright holder, funder.","code":""},{"path":"https://cmmr.github.io/jobqueue/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2024). jobqueue: Queue Run Asynchronous Interruptible R Tasks Background Processes. R package version 0.1.0.9000, https://cmmr.github.io/jobqueue/.","code":"@Manual{,   title = {jobqueue: Queue and Run Asynchronous Interruptible R Tasks on Background Processes},   author = {Daniel P. Smith},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://cmmr.github.io/jobqueue/}, }"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"jobqueue","dir":"","previous_headings":"","what":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"goals jobqueue : Run jobs parallel background processes. Allow jobs stopped point. Process job results asynchronous callbacks.","code":""},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"# Install the latest stable version from CRAN: install.packages(\"jobqueue\")  # Or the development version from GitHub: install.packages(\"pak\") pak::pak(\"cmmr/jobqueue\")"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"library(jobqueue)  q <- Queue$new()  job <- q$run({ paste('Hello', 'world!') }) job$result #> [1] \"Hello world!\""},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"asynchronous-callbacks","dir":"","previous_headings":"","what":"Asynchronous Callbacks","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"j <- q$run(   expr  = { Sys.sleep(1); 42 },    hooks = list(     'created' = ~{ message(\"We're uid '\", .$uid, \"'.\") },     '*'       = ~{ message('  - ', .$state) })) #> We're uid 'J2'. #>   - created #>   - submitted #>   - queued #>   - assigned #>   - dispatched #>   - running #>   - done  j$on('done', function (job) message('result = ', job$result)) #> result = 42"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"with-the-promises-package","dir":"","previous_headings":"Asynchronous Callbacks","what":"With the ‘promises’ Package","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"job      <- q$run({ 3.14 }) callback <- function (result) message('resolved with: ', result)  job %...>% callback #> resolved with: 42  job %>% then(callback) #> resolved with: 42  as.promise(job)$then(callback) #> resolved with: 42"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"stopping-jobs","dir":"","previous_headings":"","what":"Stopping Jobs","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"running job stopped, background process terminated. replacement background process automatically spun take place. Stopped jobs return condition object class ‘interrupt’ result.","code":""},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"manually","dir":"","previous_headings":"Stopping Jobs","what":"Manually","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"custom message can also given, e.g. job$stop('reason'), returned condition object.","code":"job <- q$run({ Sys.sleep(2); 'Zzzzz' }) job$stop() job$result #> <interrupt: job stopped by user>"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"max-runtime","dir":"","previous_headings":"Stopping Jobs","what":"Max Runtime","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"Limits (seconds) can set : total ‘submitted’ ‘done’ time: timeout = 2 per-state basis: timeout = list(queued = 1, running = 2) : timeout = list(total = 3, queued = 2, running = 2)","code":"job <- q$run({ Sys.sleep(2); 'Zzzzz' }, timeout = 0.2) job$result #> <interrupt: total runtime exceeded 0.2 seconds>"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"stop-id","dir":"","previous_headings":"Stopping Jobs","what":"Stop ID","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"New jobs replace existing jobs stop_id.","code":"job1 <- q$run({ Sys.sleep(1); 'A' }, stop_id = 123) job2 <- q$run({ 'B' },               stop_id = 123) job1$result #> <interrupt: duplicated stop_id> job2$result #> [1] \"B\""},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"copy-id","dir":"","previous_headings":"Stopping Jobs","what":"Copy ID","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"New jobs mirror output existing jobs copy_id.","code":"job1 <- q$run({ Sys.sleep(1); 'A' }, copy_id = 456) job2 <- q$run({ 'B' },               copy_id = 456) job1$result #> [1] \"A\" job2$result #> [1] \"A\""},{"path":[]},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"automaticly-identified","dir":"","previous_headings":"Variables","what":"Automaticly identified","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"x <- 3 y <- 4 job <- q$run({ x + y }) job$result #> [1] 7"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"explicitly-defined","dir":"","previous_headings":"Variables","what":"Explicitly defined","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"job <- q$run({ x + y }, list(x = 10, y = 2)) job$result #> [1] 12"},{"path":"https://cmmr.github.io/jobqueue/index.html","id":"mix-of-both","dir":"","previous_headings":"Variables","what":"Mix of both","title":"Queue and Run Asynchronous Interruptible R Tasks on Background Processes","text":"","code":"x <- 3 y <- 4 job <- q$run({ x + y }, list(x = 10), scan = TRUE) job$result #> [1] 14"},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Job to Run on a Background Worker Process. — Job","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Define Job Run Background Worker Process. Define Job Run Background Worker Process.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Job to Run on a Background Worker Process. — Job","text":"expr Get expression run Job. vars Get set variables placed expression's environment evaluation. reformat Get set function (job, output) transforming raw callr output Job's result. cpus Get set number CPUs reserve evaluating expr. tmax Get set time limits apply Job. proxy Get set Job proxy place running expr. state Get set Job's state (setting trigger callbacks). output Get set Job's raw callr output (setting change Job's state 'done'). result Get result expr. block Job finished. hooks Get currently registered callback hooks - named list functions. is_done Returns TRUE FALSE depending Job's result ready. uid Returns short string, e.g. 'J16', uniquely identifies Job.","code":""},{"path":[]},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Job$new() Job$print() Job$() Job$stop()","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Creates Job object defining run expression background worker process.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Job to Run on a Background Worker Process. — Job","text":"","code":"Job$new(   expr,   vars = NULL,   tmax = NULL,   hooks = NULL,   reformat = TRUE,   cpus = 1L )"},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Job to Run on a Background Worker Process. — Job","text":"expr call R expression wrapped curly braces evaluate worker. access variables defined vars, well Worker's globals, packages, init configuration. vars list named variables make available expr evaluation. tmax named numeric vector indicating maximum number seconds allowed state job passes , 'total' apply single timeout 'submitted' 'done'. Example: tmax = c(total = 2.5, running = 1) force-stop job 2.5 seconds submitted, also limits time running state just 1 second. hooks list functions run Job state changes, form hooks = list(created = function (job) {...}, done = ~{...}). names functions created, submitted, queued, dispatched, starting, running, done, '*'. '*' run every time state changes, whereas others run Job enters state. Duplicate names allowed. reformat underlying call callr::r_session$call() returns information stdout, stderr, etc. reformat=TRUE (default), result expression returned. Set reformat=FALSE return entire callr output, reformat=function(job,output) use function post-process output callr. cpus many CPU cores reserve Job. Queue uses number limit number simultaneously running Jobs; prevent Job using CPUs reserved.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Job object.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Print method Job.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Job to Run on a Background Worker Process. — Job","text":"","code":"Job$print(...)"},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Job to Run on a Background Worker Process. — Job","text":"... Arguments used currently.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Job, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"method-on-","dir":"Reference","previous_headings":"","what":"Method on()","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Attach callback function.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Job to Run on a Background Worker Process. — Job","text":"","code":"Job$on(state, func)"},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Job to Run on a Background Worker Process. — Job","text":"state Job state trigger function. Typically one : '*' - Every time state changes. '.next' - one time, next time state changes. 'created' - Job$new() initialization. 'submitted' - stop_id copy_id resolved. 'queued' - <Job>$queue assigned. 'dispatched' - <Job>$worker assigned. 'starting' - evaluation begins. 'running' - evaluation begins. 'done' - <Job>$output assigned. func function accepts Job object input. can call <Job>$stop() edit values changes persisted (since Jobs reference class objects). can also edit/stop queued jobs modifying Jobs <Job>$queue$jobs. Return value ignored.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Job to Run on a Background Worker Process. — Job","text":"function called removes callback Job.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"method-stop-","dir":"Reference","previous_headings":"","what":"Method stop()","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Stop Job. Job running, worker process rebooted.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Job to Run on a Background Worker Process. — Job","text":"","code":"Job$stop(reason = \"job stopped by user\")"},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Job to Run on a Background Worker Process. — Job","text":"reason message value include 'interrupt' condition object returned Job's result.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Job.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Job to Run on a Background Worker Process. — Job","text":"Job, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":null,"dir":"Reference","previous_headings":"","what":"Interruptible, Asynchronous Background Jobs. — Queue","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Submit jobs Queue run background R process one becomes available. Jobs launched order submitted, may finish different order based job's run time. Treat returned Job object promise asynchronous downstream processing job's result. Starts R sessions run background. Calls run() evaluate R functions background sessions. run() returns Job object can passed () schedule work done result, ready. Job object also $stop() element can called return result immediately. job actively running background R session, process killed new process started take place.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"jobs List Jobs currently managed Queue. workers List Workers used process Jobs. uid Unique identifier, e.g. 'Q1'. loaded List global variables attached functions Workers. state Current state: starting, active, stopped, error.","code":""},{"path":[]},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Queue$new() Queue$print() Queue$run() Queue$submit() Queue$shutdown()","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Creates n workers background processes handling $run() $submit() calls. workers initialized according globals, packages, init, options arguments. Queue use max_cpus , assuming cpus argument properly set Job.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"","code":"Queue$new(   globals = NULL,   packages = NULL,   init = NULL,   max_cpus = availableCores(omit = 1L),   workers = ceiling(max_cpus * 1.2),   options = r_session_options(),   tmax = NULL,   hooks = NULL,   reformat = TRUE,   stop_id = NULL,   copy_id = NULL )"},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"globals list similar set values added .GlobalEnv workers. packages Character vector package names load workers. init call R expression wrapped curly braces evaluate worker just , immediately start-. access variables defined globals assets packages. Returned value ignored. max_cpus Total number CPU cores can reserved running Jobs via combined cpus arguments. enforce limits actual CPU utilization. workers many background Worker processes start. Set max_cpus enable interrupted workers quickly swapped standby Workers replacement Worker boots . options Passed callr::r_session$new() tmax, hooks, reformat, stop_id, copy_id Defaults Queue's $run() method. , stop_id copy_id must function (job) NULL.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Queue object.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Print method Queue.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"","code":"Queue$print(...)"},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"... Arguments used currently.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Creates Job object submits queue running background process. , default NA value use value set Queue$new().","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"","code":"Queue$run(   expr,   vars = NULL,   scan = is.null(vars),   ignore = NULL,   tmax = NA,   hooks = NA,   reformat = NA,   cpus = 1L,   stop_id = NA,   copy_id = NA,   start = TRUE )"},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"expr call R expression wrapped curly braces evaluate worker. access variables defined vars, well Worker's globals, packages, init configuration. vars list named variables make available expr evaluation. scan additional variables added vars based scanning expr missing global variables? default, scan = .null(vars), meaning set vars = list() scan done. Set scan = TRUE always scan, scan = FALSE never scan, scan = <environment-like object> look globals . scanning, worker's environment taken account, globals worker favored globals locally. vars defined user always left untouched. ignore character vector variable names added vars scan. tmax named numeric vector indicating maximum number seconds allowed state job passes , 'total' apply single timeout 'submitted' 'done'. Example: tmax = c(total = 2.5, running = 1) force-stop job 2.5 seconds submitted, also limits time running state just 1 second. hooks list functions run Job state changes, form hooks = list(created = function (job) {...}, done = ~{...}). names functions created, submitted, queued, dispatched, starting, running, done, '*'. '*' run every time state changes, whereas others run Job enters state. Duplicate names allowed. reformat underlying call callr::r_session$call() returns information stdout, stderr, etc. reformat=TRUE (default), result expression returned. Set reformat=FALSE return entire callr output, reformat=function(job,output) use function post-process output callr. cpus many CPU cores reserve Job. Queue uses number limit number simultaneously running Jobs; prevent Job using CPUs reserved. stop_id existing Job Queue stop_id, Job stopped return 'interrupt' condition object result. stop_id can also function (job) returns stop_id assign given Job. stop_id NULL disables feature. copy_id existing Job Queue copy_id, newly submitted Job become \"proxy\" earlier Job, returning whatever result earlier Job returns. copy_id can also function (job) returns copy_id assign given Job. copy_id NULL disables feature. start Job submitted Queue (start = TRUE) just created (start = FALSE)?","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"new Job object.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"method-submit-","dir":"Reference","previous_headings":"","what":"Method submit()","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Adds Job Queue running background process.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"","code":"Queue$submit(job)"},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"job Job object, created Job$new().","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Queue, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"method-shutdown-","dir":"Reference","previous_headings":"","what":"Method shutdown()","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Stop jobs workers.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"","code":"Queue$shutdown(reason = \"job queue shut down by user\")"},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"reason Passed <Job>$stop(reason) Jobs currently managed Queue.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Queue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Interruptible, Asynchronous Background Jobs. — Queue","text":"Queue, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates a Job's Expression on a Background Process. — Worker","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Evaluates Job's Expression Background Process. Evaluates Job's Expression Background Process.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"hooks named list currently registered callback hooks. backlog list Jobs waiting run Worker. job currently running Job. r_session callr::r_session background process interface. state Worker's state: 'starting', 'idle', 'busy', 'stopped'. loaded list global variables attached functions Worker. uid short string, e.g. 'W11', uniquely identifies Worker.","code":""},{"path":[]},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker$new() Worker$print() Worker$start() Worker$stop() Worker$restart() Worker$() Worker$run()","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Creates background callr::r_session process running Jobs.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$new(   globals = NULL,   packages = NULL,   init = NULL,   hooks = NULL,   options = callr::r_session_options() )"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"globals list similar set values added .GlobalEnv workers. packages Character vector package names load workers. init call R expression wrapped curly braces evaluate worker just , immediately start-. access variables defined globals assets packages. Returned value ignored. hooks list functions run Worker state changes, form hooks = list(idle = function (worker) {...}, busy = ~{...}). names functions starting, idle, busy, stopped, '*'. '*' run every time state changes, whereas others run Worker enters state. Duplicate names allowed. options Passed callr::r_session$new()","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker object.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Print method Worker.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$print(...)"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"... Arguments used currently.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Starts new background callr::r_session process using configuration previously defined Worker$new().","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$start()"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-stop-","dir":"Reference","previous_headings":"","what":"Method stop()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Stops Worker terminating background callr::r_session process calling <Job>$stop(reason) Jobs currently assigned Worker.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$stop(reason = \"worker stopped by user\")"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"reason Passed <Job>$stop(reason) Jobs currently assigned Worker.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-restart-","dir":"Reference","previous_headings":"","what":"Method restart()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Restarts Worker calling <Worker>$stop(reason) <Worker>$start() succession.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$restart(reason = \"restarting worker\")"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"reason Passed <Job>$stop(reason) Jobs currently assigned Worker.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker, invisibly.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-on-","dir":"Reference","previous_headings":"","what":"Method on()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Attach callback function.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$on(state, func)"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"state Worker state trigger function. Typically one : '*' - Every time state changes. '.next' - one time, next time state changes. 'starting' - starting new callr::r_session process. 'idle' - Waiting new Jobs added. 'busy' - Job starts running. 'stopped' - <Worker>$stop() called. func function accepts Worker object input. can call <Worker>$stop() edit values changes persisted (since Workers reference class objects). can also edit/stop active backlogged jobs modifying <Worker>$job <Worker>$backlog. Return value ignored.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"function called removes callback Worker.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Assigns Job Worker evaluation background callr::r_session process. Jobs can assigned even Worker 'starting' 'busy' state. backlog jobs evaluated sequentially order added.","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"","code":"Worker$run(job)"},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"job Job object, created Job$new().","code":""},{"path":"https://cmmr.github.io/jobqueue/reference/Worker.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Evaluates a Job's Expression on a Background Process. — Worker","text":"Worker, invisibly.","code":""}]
